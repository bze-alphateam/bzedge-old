diff -ur a/c/CMakeLists.txt b/c/CMakeLists.txt
--- a/c/CMakeLists.txt	2019-12-09 07:17:00.000000000 -0700
+++ b/c/CMakeLists.txt	2020-01-08 16:15:26.837987469 -0700
@@ -428,18 +428,18 @@
 # Can't use target_link_libraries() because cmake 2.8.12 doesn't allow object libraries as the first param
 # otherwise for cmake 3.9 and on this would be:
 #   target_link_libraries (qpid-proton-core-objects ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS})
-target_compile_definitions(qpid-proton-core-objects PRIVATE $<TARGET_PROPERTY:qpid-proton-core,COMPILE_DEFINITIONS>)
-target_compile_options    (qpid-proton-core-objects PRIVATE $<TARGET_PROPERTY:qpid-proton-core,COMPILE_OPTIONS>)
-target_include_directories(qpid-proton-core-objects PRIVATE $<TARGET_PROPERTY:qpid-proton-core,INCLUDE_DIRECTORIES>)
-
-add_library (qpid-proton-core SHARED $<TARGET_OBJECTS:qpid-proton-core-objects>)
-target_link_libraries (qpid-proton-core ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS})
-set_target_properties (qpid-proton-core
-  PROPERTIES
-  VERSION   "${PN_LIB_CORE_VERSION}"
-  SOVERSION "${PN_LIB_CORE_MAJOR_VERSION}"
-  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-)
+#target_compile_definitions(qpid-proton-core-objects PRIVATE $<TARGET_PROPERTY:qpid-proton-core,COMPILE_DEFINITIONS>)
+#target_compile_options    (qpid-proton-core-objects PRIVATE $<TARGET_PROPERTY:qpid-proton-core,COMPILE_OPTIONS>)
+#target_include_directories(qpid-proton-core-objects PRIVATE $<TARGET_PROPERTY:qpid-proton-core,INCLUDE_DIRECTORIES>)
+
+#add_library (qpid-proton-core SHARED $<TARGET_OBJECTS:qpid-proton-core-objects>)
+#target_link_libraries (qpid-proton-core ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS})
+#set_target_properties (qpid-proton-core
+#  PROPERTIES
+#  VERSION   "${PN_LIB_CORE_VERSION}"
+#  SOVERSION "${PN_LIB_CORE_MAJOR_VERSION}"
+#  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+#)
 
 if (BUILD_STATIC_LIBS)
   add_library (qpid-proton-core-static STATIC ${qpid-proton-core-src})
@@ -454,14 +454,14 @@
   ${qpid-proton-include-extra}
 )
 
-add_library (qpid-proton SHARED $<TARGET_OBJECTS:qpid-proton-core-objects> ${qpid-proton-noncore-src})
-target_link_libraries (qpid-proton LINK_PRIVATE ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS} ${PROACTOR_LIBS})
-set_target_properties (qpid-proton
-  PROPERTIES
-  VERSION   "${PN_LIB_LEGACY_VERSION}"
-  SOVERSION "${PN_LIB_LEGACY_MAJOR_VERSION}"
-  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-)
+# add_library (qpid-proton SHARED $<TARGET_OBJECTS:qpid-proton-core-objects> ${qpid-proton-noncore-src})
+# target_link_libraries (qpid-proton LINK_PRIVATE ${SSL_LIB} ${SASL_LIB} ${TIME_LIB} ${PLATFORM_LIBS} ${PROACTOR_LIBS})
+# set_target_properties (qpid-proton
+#   PROPERTIES
+#   VERSION   "${PN_LIB_LEGACY_VERSION}"
+#   SOVERSION "${PN_LIB_LEGACY_MAJOR_VERSION}"
+#   LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+# )
 
 if (BUILD_STATIC_LIBS)
   add_library(qpid-proton-static STATIC ${qpid-proton-core-src} ${qpid-proton-noncore-src})
@@ -482,15 +482,15 @@
 
 if (qpid-proton-proactor)
   set(HAS_PROACTOR True)
-  add_library (qpid-proton-proactor SHARED ${qpid-proton-proactor})
-  target_link_libraries (qpid-proton-proactor  LINK_PUBLIC qpid-proton-core)
-  target_link_libraries (qpid-proton-proactor  LINK_PRIVATE ${PLATFORM_LIBS} ${PROACTOR_LIBS})
-  set_target_properties (qpid-proton-proactor
-    PROPERTIES
-    VERSION   "${PN_LIB_PROACTOR_VERSION}"
-    SOVERSION "${PN_LIB_PROACTOR_MAJOR_VERSION}"
-    LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-  )
+  # add_library (qpid-proton-proactor SHARED ${qpid-proton-proactor})
+  # target_link_libraries (qpid-proton-proactor  LINK_PUBLIC qpid-proton-core)
+  # target_link_libraries (qpid-proton-proactor  LINK_PRIVATE ${PLATFORM_LIBS} ${PROACTOR_LIBS})
+  # set_target_properties (qpid-proton-proactor
+  #   PROPERTIES
+  #   VERSION   "${PN_LIB_PROACTOR_VERSION}"
+  #   SOVERSION "${PN_LIB_PROACTOR_MAJOR_VERSION}"
+  #   LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+  # )
   if (BUILD_STATIC_LIBS)
     add_library (qpid-proton-proactor-static STATIC ${qpid-proton-proactor})
   endif(BUILD_STATIC_LIBS)
@@ -500,11 +500,11 @@
 if (BUILD_STATIC_LIBS)
   set(STATIC_LIBS qpid-proton-static qpid-proton-core-static)
 endif()
-install(TARGETS qpid-proton qpid-proton-core ${STATIC_LIBS}
-  EXPORT  proton
-  RUNTIME DESTINATION bin
-  ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
-  LIBRARY DESTINATION ${LIB_INSTALL_DIR})
+# install(TARGETS qpid-proton qpid-proton-core ${STATIC_LIBS}
+#   EXPORT  proton
+#   RUNTIME DESTINATION bin
+#   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+#   LIBRARY DESTINATION ${LIB_INSTALL_DIR})
 
 # Install windows pdb files
 if (MSVC)
@@ -520,11 +520,11 @@
   if (BUILD_STATIC_LIBS)
     set(STATIC_LIBS qpid-proton-proactor-static)
   endif()
-  install(TARGETS qpid-proton-proactor ${STATIC_LIBS}
-    EXPORT  proton
-    RUNTIME DESTINATION bin
-    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
-    LIBRARY DESTINATION ${LIB_INSTALL_DIR})
+  # install(TARGETS qpid-proton-proactor ${STATIC_LIBS}
+  #   EXPORT  proton
+  #   RUNTIME DESTINATION bin
+  #   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+  #   LIBRARY DESTINATION ${LIB_INSTALL_DIR})
 
   # Install windows pdb files
   if (MSVC)
@@ -576,10 +576,10 @@
   ${CMAKE_CURRENT_BINARY_DIR}/ProtonConfigVersion.cmake
   DESTINATION ${LIB_INSTALL_DIR}/cmake/Proton)
 
-add_subdirectory(docs)
-add_subdirectory(examples)
-add_subdirectory(tests)
-add_subdirectory(tools)
+# add_subdirectory(docs)
+# add_subdirectory(examples)
+# add_subdirectory(tests)
+# add_subdirectory(tools)
 
 install (DIRECTORY examples/
          DESTINATION "${PROTON_SHARE}/examples/c"
diff -ur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	2019-12-09 07:17:00.000000000 -0700
+++ b/CMakeLists.txt	2019-12-19 18:11:57.128248724 -0700
@@ -24,7 +24,7 @@
 set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/tools/cmake/Modules")
 set (CMAKE_THREAD_PREFER_PTHREAD TRUE)
 
-include (CTest)
+# include (CTest)
 include (CheckLanguage)
 include (CheckLibraryExists)
 include (CheckSymbolExists)
@@ -33,13 +33,13 @@
 find_package (OpenSSL)
 find_package (Threads)
 find_package (PythonInterp REQUIRED)
-find_package (SWIG)
+# find_package (SWIG)
 find_package (CyrusSASL)
 
-enable_testing ()
+#enable_testing ()
 
 # Set up runtime checks (valgrind, sanitizers etc.)
-include(tests/RuntimeCheck.cmake)
+# include(tests/RuntimeCheck.cmake)
 
 ## Variables used across components
 
@@ -260,7 +260,7 @@
 
 set (SYSINSTALL_BINDINGS OFF CACHE BOOL "If SYSINSTALL_BINDINGS is OFF then proton bindings will be installed underneath ${BINDINGS_DIR} and each user will need to modify their interpreter configuration to load the appropriate binding. If SYSINSTALL_BINDINGS is ON, then each language interpreter will be queried for the appropriate directory and proton bindings will be installed and available system wide with no additional per user configuration.")
 
-set (BINDING_LANGS PYTHON RUBY)
+# set (BINDING_LANGS PYTHON RUBY)
 
 foreach (LANG ${BINDING_LANGS})
   set (SYSINSTALL_${LANG} OFF CACHE BOOL "Install ${LANG} bindings into interpreter specified location.")
@@ -315,7 +315,7 @@
 endif()
 
 # Prerequisites for Go
-find_program(GO_EXE go)
+# find_program(GO_EXE go)
 mark_as_advanced(GO_EXE)
 if (GO_EXE)
   set (DEFAULT_GO ON)
diff -ur a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
--- a/cpp/CMakeLists.txt	2019-12-09 07:17:00.000000000 -0700
+++ b/cpp/CMakeLists.txt	2020-01-08 16:20:18.855394195 -0700
@@ -174,30 +174,30 @@
   set (CMAKE_DEBUG_POSTFIX "d")
 endif ()
 
-add_library(qpid-proton-cpp SHARED ${qpid-proton-cpp-source})
+# add_library(qpid-proton-cpp SHARED ${qpid-proton-cpp-source})
 if(BUILD_STATIC_LIBS)
   add_library(qpid-proton-cpp-static STATIC ${qpid-proton-cpp-source})
   set(STATIC_LIBS qpid-proton-cpp-static)
 endif(BUILD_STATIC_LIBS)
 
-target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS})
+# target_link_libraries (qpid-proton-cpp LINK_PRIVATE ${PLATFORM_LIBS} qpid-proton-core qpid-proton-proactor ${CONNECT_CONFIG_LIBS})
 
-set_target_properties (
-  qpid-proton-cpp
-  PROPERTIES
-  LINKER_LANGUAGE CXX
-  VERSION   "${PN_LIB_CPP_VERSION}"
-  SOVERSION "${PN_LIB_CPP_MAJOR_VERSION}"
-  LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
-  )
+# set_target_properties (
+#   qpid-proton-cpp
+#   PROPERTIES
+#   LINKER_LANGUAGE CXX
+#   VERSION   "${PN_LIB_CPP_VERSION}"
+#   SOVERSION "${PN_LIB_CPP_MAJOR_VERSION}"
+#   LINK_FLAGS "${CATCH_UNDEFINED} ${LTO}"
+#   )
 
 ## Install
 
-install(TARGETS qpid-proton-cpp ${STATIC_LIBS}
-  EXPORT  proton-cpp
-  RUNTIME DESTINATION bin
-  ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
-  LIBRARY DESTINATION ${LIB_INSTALL_DIR})
+# install(TARGETS qpid-proton-cpp ${STATIC_LIBS}
+#   EXPORT  proton-cpp
+#   RUNTIME DESTINATION bin
+#   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+#   LIBRARY DESTINATION ${LIB_INSTALL_DIR})
 
 # Install windows qpid-proton-cpp pdb files
 if (MSVC)
@@ -209,12 +209,12 @@
 
 install (DIRECTORY "include/proton" DESTINATION ${INCLUDE_INSTALL_DIR} FILES_MATCHING PATTERN "*.hpp")
 install (FILES "${CMAKE_CURRENT_BINARY_DIR}/config_presets.hpp" DESTINATION "${INCLUDE_INSTALL_DIR}/proton/internal")
-install (DIRECTORY "examples/"
-  DESTINATION "${PROTON_SHARE}/examples/cpp"
-  USE_SOURCE_PERMISSIONS
-  PATTERN "ProtonCppConfig.cmake" EXCLUDE)
+# install (DIRECTORY "examples/"
+#   DESTINATION "${PROTON_SHARE}/examples/cpp"
+#   USE_SOURCE_PERMISSIONS
+#   PATTERN "ProtonCppConfig.cmake" EXCLUDE)
 
-add_subdirectory(examples)
+# add_subdirectory(examples)
 add_subdirectory(docs)
 
 # Pkg config file
@@ -268,40 +268,40 @@
   set(test_env ${test_env} "PATH=$<TARGET_FILE_DIR:qpid-proton>")
 endif()
 
-macro(add_cpp_test test)
-  add_executable (${test} src/${test}.cpp)
-  target_link_libraries (${test} qpid-proton-cpp ${PLATFORM_LIBS})
-  add_test (NAME cpp-${test}
-    COMMAND ${PN_ENV_SCRIPT} -- ${test_env}  ${TEST_EXE_PREFIX_CMD} $<TARGET_FILE:${test}> ${ARGN})
-endmacro(add_cpp_test)
-
-add_cpp_test(codec_test)
-add_cpp_test(connection_driver_test)
-add_cpp_test(interop_test ${CMAKE_SOURCE_DIR}/tests)
-add_cpp_test(message_test)
-add_cpp_test(map_test)
-add_cpp_test(scalar_test)
-add_cpp_test(value_test)
-add_cpp_test(container_test)
-add_cpp_test(reconnect_test)
-add_cpp_test(link_test)
-add_cpp_test(credit_test)
-if (ENABLE_JSONCPP)
-  add_cpp_test(connect_config_test)
-  target_link_libraries(connect_config_test qpid-proton-core) # For pn_sasl_enabled
-  set_tests_properties(cpp-connect_config_test PROPERTIES WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
-  # Test data and output directories for connect_config_test
-  file(COPY  "${CMAKE_CURRENT_SOURCE_DIR}/testdata" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}")
-endif()
+# macro(add_cpp_test test)
+#   add_executable (${test} src/${test}.cpp)
+#   target_link_libraries (${test} qpid-proton-cpp ${PLATFORM_LIBS})
+#   add_test (NAME cpp-${test}
+#     COMMAND ${PN_ENV_SCRIPT} -- ${test_env}  ${TEST_EXE_PREFIX_CMD} $<TARGET_FILE:${test}> ${ARGN})
+# endmacro(add_cpp_test)
+# 
+# add_cpp_test(codec_test)
+# add_cpp_test(connection_driver_test)
+# add_cpp_test(interop_test ${CMAKE_SOURCE_DIR}/tests)
+# add_cpp_test(message_test)
+# add_cpp_test(map_test)
+# add_cpp_test(scalar_test)
+# add_cpp_test(value_test)
+# add_cpp_test(container_test)
+# add_cpp_test(reconnect_test)
+# add_cpp_test(link_test)
+# add_cpp_test(credit_test)
+# if (ENABLE_JSONCPP)
+#   add_cpp_test(connect_config_test)
+#   target_link_libraries(connect_config_test qpid-proton-core) # For pn_sasl_enabled
+#   set_tests_properties(cpp-connect_config_test PROPERTIES WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}")
+#   # Test data and output directories for connect_config_test
+#   file(COPY  "${CMAKE_CURRENT_SOURCE_DIR}/testdata" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}")
+# endif()
 
 # TODO aconway 2018-10-31: Catch2 tests
 # This is a simple example of a C++ test using the Catch2 framework.
 # See c/tests/ for more interesting examples.
 # Eventually all the C++ tests will migrate to Catch2.
 
-include_directories(${CMAKE_SOURCE_DIR}/tests/include)
-add_executable(cpp-test src/cpp-test.cpp src/url_test.cpp)
-target_link_libraries(cpp-test qpid-proton-cpp ${PLATFORM_LIBS})
+#include_directories(${CMAKE_SOURCE_DIR}/tests/include)
+#add_executable(cpp-test src/cpp-test.cpp src/url_test.cpp)
+#target_link_libraries(cpp-test qpid-proton-cpp ${PLATFORM_LIBS})
 
 macro(add_catch_test tag)
   add_test (
